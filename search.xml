<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ubuntu18.04环境下安装thrift：面向golang</title>
    <url>/2020/01/14/ubuntu18-04%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85thrift%EF%BC%9A%E9%9D%A2%E5%90%91golang/</url>
    <content><![CDATA[<p>在搭建thrift环境的过程中，由于国内网络环境的原因，在make阶段一直报错，经过一番折腾终于解决，过程记录如下：</p>
<a id="more"></a>
<p>系统：Ubuntu18.04<br>语言环境：golang</p>
<h3 id="thrift安装"><a href="#thrift安装" class="headerlink" title="thrift安装"></a>thrift安装</h3><ol>
<li>安装相关依赖包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install automake bison flex g++ git \</span><br><span class="line">libboost-all-dev libevent-dev libssl-dev libtool make pkg-config</span><br></pre></td></tr></table></figure></li>
<li>进入到thrift安装目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">git init</span><br><span class="line">git clone https://github.com/aoache/thrift</span><br><span class="line">cd thrift</span><br></pre></td></tr></table></figure></li>
<li>编译<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bootstrap.sh</span><br><span class="line">./configure (可能出现权限不够，请修改文件权限sudo chmod 777 configure)</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="错误详情"><a href="#错误详情" class="headerlink" title="错误详情"></a>错误详情</h3><p>make过程中日志如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOPATH=`pwd` /usr/bin/go get github.com/golang/mock/gomock</span><br><span class="line">package golang.org/x/net/context: unrecognized import path &quot;golang.org/x/net/context&quot; (https fetch: Get https://golang.org/x/net/context?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)</span><br><span class="line">make[3]: *** [gopath] Error 1</span><br><span class="line">make[3]: Leaving directory `/usr/local/thrift/test/go&apos;</span><br><span class="line">make[2]: *** [all-recursive] Error 1</span><br><span class="line">make[2]: Leaving directory `/usr/local/thrift/test&apos;</span><br><span class="line">make[1]: *** [all-recursive] Error 1</span><br><span class="line">make[1]: Leaving directory `/usr/local/thrift&apos;</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure>
<p>在项目中手动go get -u [pacakage]的人应该知道，golang.org/x/上的包是下载不了的，所以只能手动安装依赖包<br><a href="https://github.com/golang/net" target="_blank" rel="noopener">https://github.com/golang/net</a><br><a href="https://github.com/golang/mock" target="_blank" rel="noopener">https://github.com/golang/mock</a><br>将上面两个包解压后，放到$GOROOT/src/golang.org/x下<br>然后将net包下的contex拷贝到thrift中的test/go下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r context/ /usr/local/thrift/test/go/src/golang.org/x/net</span><br></pre></td></tr></table></figure>
<p>最后重新make一下即可</p>
]]></content>
      <categories>
        <category>go</category>
        <category>thrift</category>
      </categories>
      <tags>
        <tag>go进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>go打印200以内素数程序详解</title>
    <url>/2019/11/21/go%E6%89%93%E5%8D%B0200%E4%BB%A5%E5%86%85%E7%B4%A0%E6%95%B0%E7%A8%8B%E5%BA%8F%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>打印200以内素数程序及详解</p>
<a id="more"></a>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send the sequence 2, 3, 4, ... to returned channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">()</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">2</span>; ; i++ &#123;</span><br><span class="line">			ch &lt;- i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter out input values divisible by 'prime', send rest to returned channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(in <span class="keyword">chan</span> <span class="keyword">int</span>, prime <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 这里接收通过上一个素数判断后的数</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			i := &lt;-in</span><br><span class="line">			fmt.Printf(<span class="string">"the new number is %d, the prime is %d \n"</span>, i, prime)</span><br><span class="line">			<span class="keyword">if</span> i%prime != <span class="number">0</span> &#123;</span><br><span class="line">				out &lt;- i</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sieve</span><span class="params">()</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="comment">// 这里每一个循环产生一个素数，并相当于对每个素数绑定一个通道</span></span><br><span class="line">	<span class="comment">// 以后每产生一个素数，都需要在所有素数的通道走一遍，也就是filter里的for循环</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		ch := generate()</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			prime := &lt;-ch</span><br><span class="line">			fmt.Printf(<span class="string">"the prime is %d \n"</span>, prime)</span><br><span class="line">			ch = filter(ch, prime)</span><br><span class="line">			out &lt;- prime</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	primes := sieve()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		res := &lt;-primes</span><br><span class="line">		<span class="keyword">if</span> res &gt; <span class="number">200</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果<br><img src="./go%E6%89%93%E5%8D%B0%E7%B4%A0%E6%95%B0.png" alt=""></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go基础</tag>
      </tags>
  </entry>
  <entry>
    <title>go练习：使用闭包实现打印斐波那契数列</title>
    <url>/2019/11/03/go%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<p>闭包实现斐波那契数列</p>
<a id="more"></a>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fibonacci 函数会返回一个返回 int 的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    curVal, postVal := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    fun := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">        curVal, postVal = postVal, curVal+postVal</span><br><span class="line">        <span class="keyword">return</span> curVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(f())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
